<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\PagesBundle\Repository;

use App\CoreBundle\Libraries\gsEntityRepository;
use App\CoreBundle\Libraries\TraitTranslatableRepository;
use App\PagesBundle\Entity\Page;
/**
 * MetatagRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MetatagRepository extends gsEntityRepository {

    use TraitTranslatableRepository;

    /**
     * @param string $lang
     * @return mixed|null
     */
    public function retrivateFirst($lang = "pl") {

        $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppPagesBundle:Metatag p
                                 ORDER BY p.id DESC
                              ');

        $query->useQueryCache(true);
        $query->useResultCache(true,600,sprintf('|metatags|lang|%s', $lang));

        $result = null;
        
        if(! ($result = $this->getOneOrNullResult($query,$lang))){
            $query = $this->getEntityManager()->createQuery('SELECT p FROM AppPagesBundle:Metatag p');
            $query->useQueryCache(true);
            $query->useResultCache(true,600,sprintf('|metatags|lang|default|'));
            $result= $query->getOneOrNullResult();
        }
        return $result;
    }

    /**
     * @param $id
     * @param $lang
     * @return mixed
     */
    public function retrivateByLang($id,$lang) {

        $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppPagesBundle:Metatag p            
                                            LEFT JOIN p.translations t              
                                            WHERE p.id = :id                                                 
                                                    ');
        $query->setParameter("id", $id);                
        $query->setHint(
                \Doctrine\ORM\Query::HINT_CUSTOM_OUTPUT_WALKER, 'Gedmo\\Translatable\\Query\\TreeWalker\\TranslationWalker'
        );
                 
        $result =  $query->getOneOrNullResult();
          
        if($result){
          $result->setTranslatableLocale($lang);
          $this->getEntityManager()->refresh($result);            
        }
        
        return $result;
    }

    /**
     * @param $id
     * @param $lang
     * @return Metatag| null
     */
    public function retrivateMetatagByLang($id, $lang = "pl")
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Metatag p                                                   
                        WHERE p.id = :id                                                   
            '
            );
        $query->setParameter("id", $id);

        return $this->getOneOrNullResult($query,$lang);
    }


    /**
     * @param Page $page
     * @param string $lang
     * @return array
     */
    public function getMeta($page, $lang = "pl") {

       $metaTags = array();
       $meta = $this->retrivateFirst($lang);

       if($page->getMetaTitle())
            $metaTags["title"] = $page->getMetaTitle();
       else
            $metaTags["title"] = $meta->getTitle();

       if($page->getMetaKeywords())
            $metaTags["keywords"] = $page->getMetaKeywords();
       else
            $metaTags["keywords"] = $meta->getKeywords();

       if($page->getMetaDescription())
            $metaTags["description"] = $page->getMetaDescription();
       else
            $metaTags["description"] = $meta->getDescription();

       return $metaTags;

    }

}
