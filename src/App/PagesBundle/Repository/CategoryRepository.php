<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\PagesBundle\Repository;

use App\CoreBundle\Libraries\TraitCachingRepository;
use App\CoreBundle\Libraries\TraitTranslatableRepository;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository as NestedTree;

/**
 * CategoryRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CategoryRepository extends NestedTree
{
    use TraitTranslatableRepository;
    use TraitCachingRepository;

    /**
     * GET LIST
     *
     * @param $paginator
     * @param int $page
     * @param int $perPage
     * @param int $ParentId
     * @param string $sidx
     * @param string $sort
     * @param string $search
     * @param string $mainpage
     * @return mixed
     */
    public function getList(
        $paginator,
        $page = 1,
        $perPage = 10,
        $ParentId = 0,
        $sidx = "",
        $sort = "asc",
        $search = "",
        $mainpage = ""
    ) {


        if ($mainpage) {
            $ParentId = $mainpage;
        }

        $query = $this->getEntityManager()
            ->createQueryBuilder('a')
            ->select("a, r")
            ->from("AppPagesBundle:Category", "a")
            ->leftJoin("a.parent", 'r');


        if ($ParentId) {
            $query->andWhere(
                $query->expr()->eq('a.'.'parent', is_string($ParentId) ? $query->expr()->literal($ParentId) : $ParentId)
            );
        }

        if (!$sidx) {
            $query->orderBy('a.root, a.lft', 'ASC');
        }
        $query->getQuery();


        return $paginator->paginate(
            $query,
            $page,
            $perPage,
            array(
                'sort_field_name' => $sidx, // sort field query parameter name
                'sort_direction_name' => $sort     // sort direction query parameter name
            )
        );
    }

    /**
     * @param $slug
     * @return array
     */
    public function retrivateBySlug($slug)
    {

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Category p   
                                                        WHERE p.slug=:slug
                                                         ORDER BY p.root, p.lft ASC
                                                    '
            );
        $query->setParameter("slug", $slug);

        return $query->getResult();
    }

    /**
     * @param $id
     * @param $lang
     * @return Category| null
     */
    public function retrivateCategoryByLang($id, $lang = "pl")
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Category p                                                   
                        WHERE p.id = :id                                                   
            '
            );
        $query->setParameter("id", $id);

        return $this->getOneOrNullResult($query,$lang);
    }

    public function Delete($object)
    {
        $em = $this->getEntityManager();

        try {
            if (is_object($object)) {
                $em->remove($object);
                $em->flush();
            } else {
                $model = $this->findOneBy(array("id" => $object));
                $em->remove($model);
                $em->flush();
            }

            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * @param $object
     * @return bool|void
     */
    public function Save($object)
    {
        $em = $this->getEntityManager();

        try {
            $em->persist($object);
            $em->flush();
        } catch (\Exception $e) {
            return false;
        }
    }

    /**
     * @param $array
     * @return bool
     */
    public function multiDelete($array)
    {
        try {
            if ($array) {
                foreach ($array as $key => $value) {
                    if ($model = $this->findBy(array("id" => $value))) {
                        $this->DeleteChildrenOfParent($model);
                    }
                }
            }

            return true;
        } catch (\Exception $e) {
//             var_dump($e->getMessage());
//             exit;
            return false;
        }
    }

    /**
     * @param $object
     * @return bool
     */
    public function DeleteChildrenOfParent($object)
    {
        try {
            if (is_object($object)) {
                $pages = $this->findBy(array("parent" => $object->getId()));

                /*DELETE SUBPAGES WITH TABLE RELATED*/
                if ($pages) {
                    foreach ($pages as $key => $value) {
                        //$this->DeleteFilesPage($value);     
                        if ($this->DeleteChildrenOfParent($value)) {
                            $this->Delete($value);
                        }
                    }
                }
                /*DELETE PAGE WITH TABLE RELATED*/
                //$this->DeleteFilesPage($object);            
                if ($this->findBy(array("id" => $object->getId()))) {
                    $this->Delete($object);
                }

            } else {
                if ($model = $this->findOneBy(array("id" => $object))) {
                    $this->DeleteChildrenOfParent($model);
                    $this->Delete($model);
                }
            }

            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

}
