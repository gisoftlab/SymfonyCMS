<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\PagesBundle\Repository;


use App\PagesBundle\Entity\Category;
use App\PagesBundle\Entity\Page;
use Gedmo\Tree\Entity\Repository\NestedTreeRepository as NestedTree;
use App\CoreBundle\Libraries\TraitCachingRepository;
use App\CoreBundle\Libraries\TraitTranslatableRepository;
use Knp\Component\Pager\Paginator;

/**
 * PageRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PageRepository extends NestedTree
{
    use TraitTranslatableRepository;
    use TraitCachingRepository;

    /**
     * GET LIST
     *
     * @param Paginator $paginator
     * @param int $page
     * @param int $perPage
     * @param int $parentId
     * @param string $sidx
     * @param string $sort
     * @param string $search
     * @param string $mainpage
     * @param string $category
     * @param string $lang
     * @return \Knp\Component\Pager\Pagination\PaginationInterface
     */
    public function getList(
        Paginator $paginator,
        $page = 1,
        $perPage = 10,
        $parentId = 0,
        $sidx = "",
        $sort = "asc",
        $search = "",
        $mainpage = "",
        $category = "",
        $lang = "PL"
    ) {

        if ($mainpage) {
            $parentId = $mainpage;
        }

        $query = $this->getEntityManager()
            ->createQueryBuilder('a')
            ->select("a, r, c")
            ->from("AppPagesBundle:Page", "a")
            ->leftJoin("a.parent", 'r')
            ->leftJoin("a.category", 'c');

        $query->where('a.lang = :lang')
            ->setParameter('lang', $lang);

        // aviod diplay root page
        $query->andWhere('a.id <> :root')
            ->setParameter('root', Page::ROOT);

        if($category)
        $query->andWhere('c.id <> :category')
            ->setParameter('category', $category);

        if ($parentId) {
            $query->andWhere(
                $query->expr()->eq('a.'.'parent', is_string($parentId) ? $query->expr()->literal($parentId) : $parentId)
            );
        }

        if (($search != "Szukaj") && ($search)) {
            $query->andWhere(
                $query->expr()->like('LOWER(a.title)', $query->expr()->literal('%'.strtolower($search).'%'))
            );
        }

        if (!$sidx) {
            $query->orderBy('a.root, a.lft', 'ASC');
        }
        $query->getQuery();


        return $paginator->paginate(
            $query,
            $page,
            $perPage,
            array(
                'sort_field_name' => $sidx, // sort field query parameter name
                'sort_direction_name' => $sort     // sort direction query parameter name
            )
        );
    }

    /**
     * @param string $slug
     * @return mixed
     */
    public function retrivatePageBySlug($slug)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                                        
                    WHERE p.slug = :slug
                      and p.published = :published
                                                    '
            );
        $query->setParameter("slug", $slug);
        $query->setParameter("published", true);

        return $this->getOneOrNullResult($query);

    }

    /**
     * @param array $ids
     * @param Page $parent
     */
    private function retrivateIdsByChildren(&$ids, $parent)
    {
        $ids[] = $parent->getId();
        if (count($parent->getChildren())) {
            foreach ($parent->getChildren() as $key => $value) {
                $this->retrivateIdsByChildren($ids, $value);
            }
        }
    }

    /**
     * @param Page $entity
     * @return string
     */
    public function retrivateIdsByPage($entity)
    {
        $ids = array();

        $pool = $this->getChainCaching();
        $cachedPages = $pool->getItem(sprintf('|page|ids|%d',$entity->getId()));
        if (!$cachedPages->isHit() || !$cachedPages->get()) {
            $this->retrivateIdsByChildren($ids, $entity);
            $cachedPages->set($ids);
            $pool->save($cachedPages);
        } else {
            $ids = $cachedPages->get();
        }

        return implode(",", $ids);

    }

    /**
     * @return array
     */
    public function getMainPages()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p       
                        WHERE   p.parent is null
                            ORDER BY p.root, p.lft ASC
                '
            );

        return $query->getResult();
    }

    /**
     * @return array
     */
    public function getRootPages()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p       
                        WHERE   p.parent = :parent
                            ORDER BY p.root, p.lft ASC
                '
            );

        $query->setParameters(array("parent" => Page::ROOT));
        return $query->getResult();
    }

    /**
     * @return array
     */
    public function getPagesByCategory($category)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p       
                        WHERE  p.category = :category
                            ORDER BY p.root, p.lft ASC
                '
            );

        $query->setParameters(array(
            "category" => $category
        ));
        return $query->getResult();
    }


    /**
     * @return array
     */
    public function retrivatePageFooter()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p       
                        WHERE p.showOnParentFooter = :showOnParentFooter
                            and p.published = :published
                             ORDER BY p.root, p.lft ASC
                '
            );
        $query->setParameter("showOnParentFooter", true);
        $query->setParameter("published", false);

        return $query->getResult();
    }

    /**
     * @return array
     */
    public function retrivateByParent()
    {

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                                           
                        ORDER BY p.root, p.lft ASC
                '
            );

        return $query->getResult();
    }

    /**
     * @param $parentId
     * @param bool $published
     * @return array
     */
    public function getPagesByParentId($parentId, $published = true)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p          
                        WHERE p.parent = :parentId
                             and p.published = :published                
                             ORDER BY p.root, p.lft ASC
                '
            );
        $query->setParameter("parentId", $parentId);
        $query->setParameter("published", $published);

        return $query->getResult();
    }

    /**
     * @param $slug
     * @return array
     */
    public function retrivatePagesByParent($slug)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p       
                        LEFT JOIN p.parent t        
                        WHERE t.slug = :slug
                              and p.published = :published
                                '
            );
        $query->setParameter("slug", $slug);
        $query->setParameter("published", true);

        return $query->getResult();
    }

    /**
     * @param $id
     * @param $lang
     * @return Page| null
     */
    public function retrivatePageByLang($id, $lang = "pl")
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                                                   
                        WHERE p.id = :id                                                   
            '
            );
        $query->setParameter("id", $id);

        return $this->getOneOrNullResult($query,$lang);
    }


    /**
     * @param string $slug
     * @param string $lang
     * @return Page| null
     */
    public function retrivateTranslatedPage($slug, $lang = "pl")
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                    
                        WHERE   
                              p.slug = :slug
                              and p.published  = :published
              '
            );
        $query->setParameter('slug', $slug);
        $query->setParameter("published", true);
        $query->useQueryCache(true);
        $query->useResultCache(true,600,sprintf('|page|%s|lang|%s', $slug, $lang));

        return $this->getOneOrNullResult($query,$lang);
    }

    /**
     * @param integer $parentId
     * @param string $lang
     * @return array
     */
    public function retrivateByParentLng($parentId, $lang = "pl")
    {

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                                                                                                             
                            WHERE 
                                  p.published  = :published
                              and p.parent = :parent
                                    '
            );
        $query->setParameter('parent', $parentId);
        $query->setParameter("published", true);
        $query->useQueryCache(true);
        $query->useResultCache(true,600,sprintf('|page|parent|%d|lang|%s', $parentId, $lang));

        return $this->getResult($query,$lang);
    }

    /**
     * @param integer $category
     * @param string $lang
     * @return mixed
     */
    public function retrivateByBlockLang($categoryId, $lang)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                                                                                                         
                        WHERE                                                                                      
                                    p.published  = :published
                                    and p.category = :category
                        ORDER BY p.root, p.lft ASC    
                                '
            );

        $query->setParameter('category', $categoryId);
        $query->setParameter("published", true);
        $query->useQueryCache(true);
        $query->useResultCache(true,600,sprintf('|page|block|%d|lang|%s', $categoryId, $lang));

        return $this->getResult($query,$lang);
    }

    /**
     * @param $category
     * @return array
     */
    public function retrivateByBlock($category)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p                                                                                                         
                        WHERE                                                                                             
                              p.published  = :published
                             and p.category = :category
                                '
            );
        $query->setParameter('category', $category);
        $query->setParameter("published", true);

        return $query->getResult();
    }

    /**
     * @param $lang
     * @return Page| null
     */
    public function retrivateFirstPageByLang($lang)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p          
                        WHERE  p.published = :published                
                         ORDER BY p.root, p.lft ASC
                '
            );
        $query->setParameter("published", true);

        return $this->getOneOrNullResult($query,$lang);
    }


    public function getMaxSequence()
    {

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppPagesBundle:Page p 
                        ORDER BY p.sequence DESC'
            );
        $query->setMaxResults(1);

        $result = $query->getOneOrNullResult();

        if ($result) {
            return ($result->getSequence() + 1);
        } else {
            return 1;
        }
    }

    public function delete($object)
    {
        $em = $this->getEntityManager();

        try {
            if (is_object($object)) {
                $em->remove($object);
                $em->flush();
            } else {
                $model = $this->findOneBy(array("id" => $object));
                $em->remove($model);
                $em->flush();
            }

            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

    public function save(&$object)
    {
        $em = $this->getEntityManager();

        try {
            $em->persist($object);
            $em->flush();

            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

    public function multiDelete($array)
    {
        try {
            if ($array) {
                foreach ($array as $key => $value) {
                    if ($model = $this->findBy(array("id" => $value))) {
                        $this->DeleteChildrenOfParent($model);
                    }
                }
            }

            return true;
        } catch (\Exception $e) {
//             var_dump($e->getMessage());
//             exit;
            return false;
        }
    }

    public function DeleteChildrenOfParent($object)
    {
        try {
            if (is_object($object)) {
                $pages = $this->findBy(array("parent" => $object->getId()));

                /*DELETE SUBPAGES WITH TABLE RELATED*/
                if ($pages) {
                    foreach ($pages as $key => $value) {
                        //$this->DeleteFilesPage($value);     
                        if ($this->DeleteChildrenOfParent($value)) {
                            $this->Delete($value);
                        }
                    }
                }
                /*DELETE PAGE WITH TABLE RELATED*/
                //$this->DeleteFilesPage($object);            
                if ($this->findBy(array("id" => $object->getId()))) {
                    $this->Delete($object);
                }

            } else {
                if ($model = $this->findOneBy(array("id" => $object))) {
                    $this->DeleteChildrenOfParent($model);
                    $this->Delete($model);
                }
            }

            return true;
        } catch (\Exception $e) {
            return false;
        }
    }

}
