<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\SettingsBundle\Repository;

use App\SettingsBundle\Entity\Languages;
use App\CoreBundle\Libraries\gsEntityRepository;

/**
 * CounterRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class LanguagesRepository extends gsEntityRepository
{

    public function getList($paginator, $page = 1, $perPage = 10, $sidx = "a.id", $sort = "asc") {

        if (!$sidx)
            $sidx = "a.id";

        $query = $this->getEntityManager()
            ->createQuery('SELECT a FROM '.  $this->getTableName().' a LEFT JOIN a.country c
                    ORDER BY '.$sidx.'
        ');

        return $paginator->paginate($query, $page, $perPage, array(
            'sort_field_name' => $sidx, // sort field query parameter name
            'sort_direction_name' => $sort     // sort direction query parameter name
        ));
    }

    public function getActiveLst()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppSettingsBundle:Languages p 
                                                    WHERE p.isUsed =:isUsed
                                                    GROUP By p.culture
                                                    ORDER BY p.sequence ASC                                                    
                                                    '
            );
        $query->setParameter("isUsed", Languages::IS_USED_YES);

        return $query->getResult();
    }

    public function getLangLst()
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppSettingsBundle:Languages p 
                                                    GROUP By p.culture
                                                    ORDER BY p.sequence ASC                                                    
                                                    '
            );

        return $query->getResult();
    }

    public function lower($sequence)
    {

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppSettingsBundle:Languages p 
                                                    WHERE p.sequence >=:sequence
                                                    ORDER BY p.sequence ASC                                                    
                                                    '
            );
        $query->setParameter("sequence", $sequence);
        $query->setMaxResults(2);

        try {
            $list = $query->getResult();

//            var_dump($query->getArrayResult());
//            exit;

            $first = $list[0]->getSequence();
            $secund = $list[1]->getSequence();

            $list[0]->setSequence($secund);
            $this->save($list[0]);
            $list[1]->setSequence($first);
            $this->save($list[1]);

            return true;
        } catch (Exception $e) {
            return false;
        }
    }

    public function higher($sequence)
    {
        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppSettingsBundle:Languages p 
                                                    WHERE p.sequence <=:sequence
                                                    ORDER BY p.sequence DESC                                                    
                                                    '
            );
        $query->setParameter("sequence", $sequence);
        $query->setMaxResults(2);

        try {
            $list = $query->getResult();

            $first = $list[0]->getSequence();
            $secund = $list[1]->getSequence();

            $list[0]->setSequence($secund);
            $this->save($list[0]);
            $list[1]->setSequence($first);
            $this->save($list[1]);

            return true;
        } catch (Exception $e) {
            return false;
        }

    }


    public function getMaxSequence()
    {

        $query = $this->getEntityManager()
            ->createQuery(
                'SELECT p FROM AppSettingsBundle:Languages p 
                                                    ORDER BY p.sequence DESC'
            );
        $query->setMaxResults(1);

        $result = $query->getOneOrNullResult();

        if ($result) {
            return ($result->getSequence() + 1);
        } else {
            return 1;
        }
    }

}
