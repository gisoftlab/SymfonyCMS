<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\FilesBundle\Repository;

use Doctrine\ORM\EntityRepository;
use App\FilesBundle\Entity\Thumbnail as Thumbnail;
use App\FilesBundle\Entity\File as File;
use App\PagesBundle\Entity\PageFiles as PageFiles;
use Imagine\Image\ImageInterface;
use Symfony\Component\HttpFoundation\File\UploadedFile;
use App\CoreBundle\Libraries\gsEntityRepository;
/**
 * FilesRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class FileRepository extends gsEntityRepository {

    
    public function getMaxSequence() {
        
         $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppFilesBundle:File p 
                                                    ORDER BY p.sequence DESC'
        );        
        $query->setMaxResults(1);

        $result =  $query->getOneOrNullResult();                
        
         if($result)        
            return ($result->getSequence()+1);
        else
            return 1;                   
    }
    
     public function retrieveFilesByPage($PagesId) {
         
          $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppPagesBundle:PageFiles p
                                        LEFT JOIN p.file f
                                            WHERE p.page =:PagesID                                                                                                            
                                                    ORDER BY p.sequence ASC');
         
        $query->setParameter("PagesID", $PagesId);
        return $query->getResult();                  
    }
    
    public function retrieveFilesByProduct($ProductId) {
         
          $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:ProductFiles p
                                        LEFT JOIN p.file f
                                            WHERE p.product =:Id                                                                                                            
                                                    ORDER BY p.sequence ASC');
         
        $query->setParameter("Id", $ProductId);
        return $query->getResult();                  
    }
    
     public static function DeleteDir($dir) {

        if (!file_exists($dir))
            return false;

        $fd = opendir($dir);
        if (!$fd)
            return false;
        while (($file = readdir($fd)) !== false) {
            if ($file == "." || $file == "..")
                continue;
            if (is_dir($dir . "/" . $file)) {
                self::DeleteDir($dir . "/" . $file);
            } else {
                unlink("$dir/$file");
            }
        }
        closedir($fd);
        rmdir($dir);

        return true;
   }
   
    public function DeleteFile($FilesId)
    {
                
        $file = $this->findOneBy(array("id"=>$FilesId));        
        
        if(!$file)        
            return false;
        /*
        // Prepare Path to delete event do Server will be changed
        */
        $filesPath = str_replace($file->getFilePath(), "", $file->getFullPath());
        $filesPathToDelete = str_replace($filesPath, "", $file->getPath());         
        $filesPathToDelete = substr($filesPathToDelete, 1);        

        self::DeleteDir(File::getPathRoot().$filesPathToDelete);
        
        // delete all thumbnails                
        if($file->getThumbnails())
        foreach ($file->getThumbnails() as $key => $value) {    
            $file->removeThumbnails($value);            
        }        
        
        $this->save($file);
    }
    
    public function SaveTitle($FilesId,$title)
    {   
        $file = $this->findOneBy(array("id"=>$FilesId));
        $file->setTitle($title);                                
        $this->save($file);
    }
    
    public function SetIcon($FilesId,$id)
    {        
        $page = $this->getEntityManager()->getRepository("App\PagesBundle\Entity\Page")->findOneBy(array("id"=>$id));
        $page->setIcon($this->findOneBy(array("id"=>$FilesId)));
                
        $this->save($page);        
    }
    
    public function setIconProd($FilesId,$id)
    {        
        $page = $this->getEntityManager()->getRepository("App\ProductBundle\Entity\Product")->findOneBy(array("id"=>$id));
        $page->setIcon($this->findOneBy(array("id"=>$FilesId)));
                
        $this->save($page);        
    }
    
    public function object_to_array($data)
{
    if (is_array($data) || is_object($data))
    {
        $result = array();
        foreach ($data as $key => $value)
        {
            $result[$key] = object_to_array($value);
        }
        return $result;
    }
    return $data;
}
        
    public function Upload($file,$title,$PagesId,$waterMark)
    {        
        $pathCreator = File::getPathRoot().File::$filePaths;        
        $page = $this->findOneBy(array("id"=>$PagesId));                
        
        $name = ""; 
        $extention = "";
        if($file)
        {
            $type = $file->getType();
            if(strpos($type, "image") !== false)
                $name = File::$ImageDir;
            else
                $name = File::$FileDir;                        
            
            $orginalName = $file->getClientOriginalName();
                        
            $orginalName = explode(".", $orginalName);
            $orginName = $orginalName[0];
            $extention = '.'.strtolower($orginalName[count($orginalName)-1]);                    
        }
        
        // CREATE MODEL FILE    
        $modFiles = new File();                                                                                                       
        $modFiles->setName($name);
        $modFiles->setOrginName($file->getClientOriginalName());
        $modFiles->setExtention($extention);
        $modFiles->setSize($file->getSize());
        $modFiles->setMimeType($file->getType());
        $modFiles->setTitle($title);
        $modFiles->setFileType(File::getContentTypeDir($file->getType()));                
        $this->save($modFiles);
        
        
        $FileId = $modFiles->getId();        
        $pathCreator .= $name."/".$PagesId."/".$FileId."/";                   
        $filePaths = $pathCreator;
        
        $pathCreator .= Thumbnail::$ImageSizeOriginal."/";   
        
        
        if (!file_exists($pathCreator)) {
          if (!mkdir($pathCreator, 0777, true)) {
            throw new sfException('dir not created');
          }
        }
        
        
        $webPath = "/".File::$filePaths.$name."/".$PagesId."/".$FileId."/".Thumbnail::$ImageSizeOriginal."/".$name.$extention;                        
        $pathCreator .= $name.$extention;
        $fullpath = $pathCreator;
        
        // UPDATE MODEL FILE   
        $modFiles->setFilePath($filePaths);
        $modFiles->setPath($webPath);                
        $modFiles->setFullPath($fullpath);
        $this->save($modFiles);
        
        $modPagesFiles = new Pagefiles();
        $modPagesFiles->setPage($page);
        $modPagesFiles->setFile($modFiles);
        $this->save($modPagesFiles);
        
        $Icons = $page->getIcon();
        
        
        if(!$Icons){
            $page->setIcon($modFiles);
            $this->save($page);            
        }
        
        if($modFiles->getFileType() == File::$FileTypeImages){
            
            if($waterMark){                
//                $waterMarkPath = File::getPathRoot().File::$filePaths.File::$waterMark;                                                
//                $img = new sfImage($file->getTempName(), $modFiles->getMimeType(),"GD");
//                $img->resize(null, null, true, true)->overlay(new sfImage($waterMarkPath,'image/png',''),"middel-center");                                                                        
//                $img->saveAs($modFiles->getFullPath());                
            }else{
//                $img = new sfImage($file->getTempName(), $modFiles->getMimeType(),"GD");
//                $img->resize(null, null, true, true);
//                $img->saveAs($modFiles->getFullPath());       
                 $this->imagine->open($file->getTempName())->save($modFiles->getFullPath());
            }
            
            $this->getEntityManager()->getRepository("App\FilesBundle\Entity\Thumbnail")
                    ->UploadThumbnails($modFiles, File::$filePaths.$name."/".$PagesId."/".$FileId."/");                        
        }
        else
        {
            if(file_exists($file->getTempName()))
                move_uploaded_file($file->getTempName(), $pathCreator);
        }
    }            

}
