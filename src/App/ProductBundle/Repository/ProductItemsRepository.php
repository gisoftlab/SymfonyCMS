<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\ProductBundle\Repository;

use App\CoreBundle\Libraries\gsEntityRepository;

/**
 * ProductItemsRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductItemsRepository extends gsEntityRepository {
   
    public function getList($paginator, $page = 1, $perPage = 10, $productId = 0, $sidx = "", $sort = "asc", $search = "") {


        $query = $this->getEntityManager()
                ->createQueryBuilder('a')
                ->select("a")
                ->from($this->getTableName(), "a");
     
        
        if($productId)
            $query->andWhere($query->expr()->eq('a.'.'product', is_string($productId) ? $query->expr()->literal($productId) : $productId));
          
         if (!$sidx)
            $query->orderBy('a.sequence', 'ASC');
        $query->getQuery();


        return $paginator->paginate($query, $page, $perPage, array(
                    'sort_field_name' => $sidx, // sort field query parameter name
                    'sort_direction_name' => $sort     // sort direction query parameter name
                ));
    }
    
    public function Lower($sequence,$productID = null) {
         
         $subquery = "";
         if($productID)
          $subquery = "and p.product = ".$productID;
         
             $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:ProductItems p 
                                                    WHERE p.sequence >=:sequence  
                                                    '.$subquery.'                                                        
                                                    ORDER BY p.sequence ASC'
        );        
             
        $query->setParameter("sequence", $sequence);
        $query->setMaxResults(2);

        try{            
            
            $list =  $query->getResult();                        
            $first = $list[0];
            $secund =  $list[1];
            $firstSeq = $first->getSequence();
            $secundSeq =  $secund->getSequence();
            
           $first->setSequence($secundSeq);
           $secund->setSequence($firstSeq);
           $this->save($first);
           $this->save($secund);
            
            return true;
        }catch (Exception $e){
            return false;
        }
        
     }
     
     public function Higher($sequence,$productID = null) {
           $subquery = "";
         if($productID)
         $subquery = "and p.product = ".$productID;
         
             $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:ProductItems p 
                                                    WHERE p.sequence <=:sequence  
                                                    '.$subquery.'                                                        
                                                    ORDER BY p.sequence DESC'
        );        
             
        $query->setParameter("sequence", $sequence);
        $query->setMaxResults(2);

        try{            
            
            $list =  $query->getResult();
                        
            $first = $list[0];
            $secund =  $list[1];
            $firstSeq = $first->getSequence();
            $secundSeq =  $secund->getSequence();
            
           $first->setSequence($secundSeq);
           $secund->setSequence($firstSeq);
           $this->save($first);
           $this->save($secund);
            
            return true;
        }catch (Exception $e){
            return false;
        }
     }
}
