<?php
/*
 * This file is part of the Gisoft package.
 *
 * (c) Damian Ostraszewski
 *
 */
namespace App\ProductBundle\Repository;

use App\CoreBundle\Libraries\gsEntityRepository;
use App\CoreBundle\Libraries\TraitTranslatableRepository;

/**
 * ProductRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ProductRepository extends gsEntityRepository {

    use TraitTranslatableRepository;

   public function retrivateProductByCategories($ids) {
        
        $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:Product p
                                            WHERE p.page in(:ids)
                                                        and p.published = :published
                                                    ');
        $query->setParameter("ids", $ids);
        $query->setParameter("published", true);
         
        return $query->getOneOrNullResult();                
  }
  
  public function retrivatePromoted($max = 3, $lang) {
                      
        $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:Product p
                                            WHERE p.promoted =:promoted
                                                        and p.published = :published
                                                    ');
        $query->setParameter("promoted", true);
        $query->setParameter("published", true);
        $query->setMaxResults($max);

        $query->useQueryCache(true);
        $query->useResultCache(true,600,sprintf('|product|promoted|%s|lang|%s', $max,$lang));

        return $this->getResult($query, $lang);
  }
  
   public function retrivateRandom() {
                      
        $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:Product p
                                            WHERE p.published = :published
                                                    ');
        $query->setParameter("published", true);
        //$query->setMaxResults(6);
        
        $resultes = $query->getResult();        
        $randResultes = array();
        if(count($resultes) > 0) {
            $rand_keys = array_rand($resultes, 6);

            foreach ($rand_keys as $key => $value) {
                $randResultes[$value] = $resultes[$value];
            }

            return $randResultes;
        }

        return array();
  }
  
  public function retrivateBySlug($slug, $lang = "pl") {
        
        $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:Product p                                            
                                            WHERE p.slug =:slug
                                                        and p.published = :published
                                                    ');
        $query->setParameter("slug", $slug);
        $query->setParameter("published", true);
        $query->useQueryCache(true);
        $query->useResultCache(true,600,sprintf('|product|%s|lang|%s', $slug, $lang));
        
        return $query->getOneOrNullResult();                
        
  }
  
   public function listProductByCategories($paginator, $ids = '', $page = 1, $perPage = 10, $sidx = "", $sort = "asc", $search = "") {
        
         $query = $this->getEntityManager()
                ->createQueryBuilder('a')
                ->select("a")
                ->from("AppProductBundle:Product", "a");
     
        
        if($ids)
            $query->andWhere($query->expr()-> in('a.'.'page',$ids));
        
        $query->andWhere($query->expr()->eq('a.'.'published',true));
        
        if (($search != "Szukaj") && ($search)) 
            $query->andWhere( $query->expr()->like('LOWER(a.title)', $query->expr()->literal('%' . strtolower ($search) . '%')) );       
          
         if (!$sidx)
            $query->orderBy('a.sequence', 'ASC');
        $query->getQuery();
        
        $pagin =  $paginator->paginate($query, $page, $perPage, array(
                    'sort_field_name' => $sidx, // sort field query parameter name
                    'sort_direction_name' => $sort     // sort direction query parameter name
        ));              
        
        $pagin->setTemplate('WebWebBundle:Pagination:pagination.html.twig'); 
        $pagin->setPageRange(5);
        
        return $pagin;
  }
  
    public function getList($paginator, $page = 1, $perPage = 10, $pagesId = 0, $sidx = "", $sort = "asc", $search = "") {


        $query = $this->getEntityManager()
                ->createQueryBuilder('a')
                ->select("a")
                ->from("AppProductBundle:Product", "a");
     
        
        if($pagesId)
            $query->andWhere($query->expr()->eq('a.'.'page', is_string($pagesId) ? $query->expr()->literal($pagesId) : $pagesId));
          
//        if (($search != "Szukaj") && ($search)) 
//            $query->andWhere( $query->expr()->like('LOWER(a.title)', $query->expr()->literal('%' . strtolower ($search) . '%')) );                    
//        
         if (!$sidx)
            $query->orderBy('a.sequence', 'ASC');
        $query->getQuery();


        return $paginator->paginate($query, $page, $perPage, array(
                    'sort_field_name' => $sidx, // sort field query parameter name
                    'sort_direction_name' => $sort     // sort direction query parameter name
                ));
    }
    
     public function Lower($sequence,$categoryID = null) {
         
         $subquery = "";
         if($categoryID)
         $subquery = "and p.page = ".$categoryID;
         
             $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:Product p 
                                                    WHERE p.sequence >=:sequence  
                                                    '.$subquery.'                                                        
                                                    ORDER BY p.sequence ASC'
        );        
             
        $query->setParameter("sequence", $sequence);
        $query->setMaxResults(2);

        try{            
            
            $list =  $query->getResult();                        
            $first = $list[0];
            $secund =  $list[1];
            $firstSeq = $first->getSequence();
            $secundSeq =  $secund->getSequence();
            
           $first->setSequence($secundSeq);
           $secund->setSequence($firstSeq);
           $this->save($first);
           $this->save($secund);
            
            return true;
        }catch (Exception $e){
            return false;
        }
        
     }
     
     public function Higher($sequence,$categoryID = null) {
           $subquery = "";
         if($categoryID)
         $subquery = "and p.page = ".$categoryID;
         
             $query = $this->getEntityManager()
                ->createQuery('SELECT p FROM AppProductBundle:Product p 
                                                    WHERE p.sequence <=:sequence  
                                                    '.$subquery.'                                                        
                                                    ORDER BY p.sequence DESC'
        );        
             
        $query->setParameter("sequence", $sequence);
        $query->setMaxResults(2);

        try{            
            
            $list =  $query->getResult();
            $first = $list[0];
            $secund =  $list[1];
            $firstSeq = $first->getSequence();
            $secundSeq =  $secund->getSequence();
            
           $first->setSequence($secundSeq);
           $secund->setSequence($firstSeq);
           $this->save($first);
           $this->save($secund);
            
            return true;
        }catch (Exception $e){
            return false;
        }
     }       

}
